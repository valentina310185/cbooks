	<?php
public static function EmptyJSON($object)
	{
		return $object == "[]";
	}
	
	public static function IsNullOrEmptyString($object)
	{
		return (!isset($object) || trim($object)==='');
	}

	public static function Equal($object1, $object2)
	{
		return $object1 == $object2;
	}

	public static function EqualSameType($object1, $object2)
	{
		return $object1 === $object2;
	}

	public static function Greater($object, $len)
	{
		return strlen($object) > $len;
	}

	public static function GreaterEqual($object, $len)
	{
		return strlen($object) >= $len;
	}

	public static function Less($object, $len)
	{
		return strlen($object) < $len;
	}

	public static function LessEqual($object, $len)
	{
		return strlen($object) <= $len;
	}

	public static function Email($object)
	{
		return filter_var($object, FILTER_VALIDATE_EMAIL);
	}

	public static function AlphaNumeric($object)
	{
		$regex = '/^[a-zA-Z0-9]*$/';
		return preg_match($regex, $object);
	}

	/*
	 * Formats allowed
	 * (123) 456 7899
	 * (123).456.7899
	 * (123)-456-7899
	 * 123-456-7899
	 * 123 456 7899
	 * 1234567899
	 */
	public static function Phone($object)
	{
		$regex = '/\(?([0-9]{3})\)?([ .-]?)([0-9]{3})\2([0-9]{4})/';
		return preg_match($regex, $object);
	}

	public static function URL($object)
	{
		return filter_var($object, FILTER_VALIDATE_URL);
	}

	public static function IP($object)
	{
		return filter_var($object, FILTER_VALIDATE_IP);
	}
	
	//Verificar
	public static function ValidDate($date, $format = 'm/d/Y')
	{
		$object = GetPostObjectCase($object);
		if(!isset($date) || strlen($_POST[$object]) == 0 )
			return false;
		else 
		{
			$d = DateTime::createFromFormat($format, $date);
			return $d && $d->format($format) == $date;
		}
	}
	

// This class is not used on the system right now but in the future maybe
class Request
{
	public static function Sanititize($object)
	{
		$search = array(
			'@<script[^>]*?>.*?</script>@si', // Strip out javascript
			'@<[\/\!]*?[^<>]*?>@si', // Strip out HTML tags
			'@<style[^>]*?>.*?</style>@siU', // Strip style tags properly
			'@<![\s\S]*?--[ \t\n\r]*>@' // Strip multi-line comments
		);
		$object = preg_replace($search, '', $object);
		$object = strip_tags($object);
		$object = htmlentities($object);
		return $object;
	}
	 
	 // Helps make php case insensitive
	 public static function GetPostObjectCase($object) {
		if(isset($_POST[$object]))
			return $object;
		else if(isset($_POST[strtoupper($object)]))
			return strtoupper($object);
		else if(isset($_POST[strtolower($object)]))
			return strtolower($object);
		else
			return $object;
	 }
	 
	public static function IsSetPostValue($object) {
		$object = self::GetPostObjectCase($object);
		return isset($_POST[$object]);
	}

	public static function GetPostValue($object)
	{
		$object = self::GetPostObjectCase($object);
		return (isset($_POST[$object])) ? $_POST[$object] : null;
	}

	public static function IsNotSetOrEmptyPostString($object)
	{
		$object = self::GetPostObjectCase($object);
		if(!isset($_POST[$object]) || strlen($_POST[$object]) == 0)
		return true;
	} 

	public static function IsNotSetPostString($object, $maxLength = null)
	{
		$object = self::GetPostObjectCase($object);
		if($maxLength == null):
			if(!isset($_POST[$object]))
					return true;
				else
					return false;
		else:
			if(!isset($_POST[$object]) || strlen($_POST[$object]) > $maxLength)
				return true;
			else
				return false;
		endif; 
	}

	public static function IsNotValidPostString($object, $maxLength)
	{
		$object = self::GetPostObjectCase($object);
		if(!isset($_POST[$object]) || strlen($_POST[$object]) == 0 || strlen($_POST[$object]) > $maxLength)
			return true;
		else
			return false; 
	}

	public static function IsNotValidPostNumber($object)
	{
		$object = self::GetPostObjectCase($object);
		if(!isset($_POST[$object]) || !is_numeric($_POST[$object]))
			return true;
		else
			return false;
	}

	function UnsetPost($object)
	{
		$object = self::GetPostObjectCase($object);
		unset($_POST[$object]);
	}
}

?>